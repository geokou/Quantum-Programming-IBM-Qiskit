from qiskit import QuantumCircuit
from qiskit.quantum_info import SparsePauliOp
from qiskit.transpiler import generate_preset_pass_manager
from qiskit_ibm_runtime import EstimatorV2 as Estimator
 
# Create a new circuit with two qubits
qc = QuantumCircuit(2)
 
# Add a Hadamard gate to qubit 0
qc.h(0)
 
# Perform a controlled-X gate on qubit 1, controlled by qubit 0
qc.cx(0, 1)
 
# Return a drawing of the circuit using MatPlotLib ("mpl"). This is the
# last line of the cell, so the drawing appears in the cell output.
# Remove the "mpl" argument to get a text drawing.
qc.draw("mpl")

# Set up six different observables.
 
observables_labels = ["IZ", "IX", "ZI", "XI", "ZZ", "XX"]
observables = [SparsePauliOp(label) for label in observables_labels]


from qiskit_ibm_runtime import QiskitRuntimeService
 
service = QiskitRuntimeService()
 
backend = service.least_busy(simulator=False, operational=True)
 
# Convert to an ISA circuit and layout-mapped observables.
pm = generate_preset_pass_manager(backend=backend, optimization_level=1)
isa_circuit = pm.run(qc)
 
isa_circuit.draw("mpl", idle_wires=False)

# Construct the Estimator instance.
 
estimator = Estimator(mode=backend)
estimator.options.resilience_level = 1
estimator.options.default_shots = 5000
 
mapped_observables = [
    observable.apply_layout(isa_circuit.layout) for observable in observables
]
 
# One pub, with one circuit to run against five different observables.
job = estimator.run([(isa_circuit, mapped_observables)])
 
# Use the job ID to retrieve your job data later
print(f">>> Job ID: {job.job_id()}")

# This is the result of the entire submission.  You submitted one Pub,
# so this contains one inner result (and some metadata of its own).
job_result = job.result()
 
# This is the result from our single pub, which had six observables,
# so contains information on all six.
pub_result = job.result()[0]



# Plot the result
 
from matplotlib import pyplot as plt
 
values = pub_result.data.evs
 
errors = pub_result.data.stds
 
# plotting graph
plt.plot(observables_labels, values, "-o")
plt.xlabel("Observables")
plt.ylabel("Values")
plt.show()


# AER-----
from qiskit_aer.primitives import Estimator

estimator = Estimator()

job = estimator.run([qc] * len(observables), observables)

job.result()

import matplotlib.pyplot as plt

data = ['ZZ', 'ZI', 'IZ', 'XX', 'XI', 'IX']
values = job.result().values

plt.plot(data, values, '-o')
plt.xlabel('Observables')
plt.ylabel('Expectation value')
plt.show()
# AER-----


# ISA Vs Aer (comparison)
import matplotlib.pyplot as plt

#  Results returned from Aer (Ideal)
aer_values = [1.0, 0.07, 0.065, 1.0, -0.07, -0.055]  # Example: returned in submitted_observables order
aer_result_dict = dict(zip(submitted_observables, aer_values))

#  Results returned from ISA (Hardware)
isa_values = [0.98, 0.00, -0.015, 1.0, -0.03, -0.03]  # Example: same order
isa_result_dict = dict(zip(submitted_observables, isa_values))

#  Define consistent plot order for final graph
plot_order = ["IZ", "IX", "ZI", "XI", "ZZ", "XX"]

#  Reorder both results by plot_order
aer_plot = [aer_result_dict[label] for label in plot_order]
isa_plot = [isa_result_dict[label] for label in plot_order]

#  Plot
plt.figure(figsize=(10, 6))
plt.plot(plot_order, aer_plot, "go--", label="üß† Ideal Simulator (Aer)")
plt.plot(plot_order, isa_plot, "ro-", label="‚öõÔ∏è Real Quantum Hardware (ISA)")

plt.xlabel("Observable")
plt.ylabel("Expectation Value")
plt.title("Expectation Values: Ideal vs Real Hardware (Aligned)")
plt.ylim(-0.2, 1.1)
plt.grid(True)
plt.legend()
plt.show()

